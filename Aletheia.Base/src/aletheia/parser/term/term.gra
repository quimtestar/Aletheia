#-------------------------------------------------------------------------------
# Copyright (c) 2016 Quim Testar.
# 
# This file is part of the Aletheia Proof Assistant.
# 
# The Aletheia Proof Assistant is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
# 
# The Aletheia Proof Assistant is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with the Aletheia Proof Assistant. If not, see
# <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------

# Start variable: The term.
T; 							

# A term is a nonempty list of bar-expressions.
T -> T B;										 
T -> B;

# The '/' operator is left-associative.
B -> B bar Q; 					# The '/' operator extracts the given sub-term of this term and turns it into a function with its type as parameter type: "f(t)/t" ~> "<x:i# -> f(x)>".
B -> Q;							# Just an match term.

# The '?' operator is non-associative.
Q -> C question C;				# Term matching: "<x:t -> a(x)>?a(b)" ~> b.
Q -> C;							# Just a (possibly) multiprojected atom.

C -> A MP;						# An atom projected zero or more times: "<p:t->b>*"

# An atom might be:
A -> tau;						# The primitive type "Tau".
A -> I;							# An identifier.
A -> atparam;					# An 'at' parameter of the form "@n" where n is a natural number. 
A -> F;							# A function term : "<parameter:type -> body>".
A -> R;							# A reference to a statement: "&something".
A -> hexref;					# An hexadecimal reference to a variable of the form "#xxxxxxxx" where xxxxxxxx are hexadecimal digits. 
A -> A tilde;					# Another atom (which should resolve to a projected function) unprojected: "<p:t->b>*~" ~> "<p:t->b>". 
A -> A percent;					# The '%' operator resolves to the parameter's type of the given function: "<p:t->b>%" ~> "t".   
A -> A sharp;					# the '#' operator resolves to the type of the given atom.
A -> A apostrophe;				# The ''' operator resolves to the body of the given function "<p:t->b>'" ~> "b".
A -> A bang I;					# The '!' operator unfolds the given identified variable as its value as a declaration statement in the active context.  
A -> equals bang I;				# The '=!' operator is equivalent to a reflexive application of the binary '!': "=!i" ~> "i!i". 
A -> openpar T closepar;		# A term (list of atoms) between parentheses.
A -> A number M;				# The 'n' operator resolves to the nth atomic component (starting by zero) of the given term: "(a b c);1" ~> "b".
A -> A semicolon number M;		# The 'n' operator resolves to the nth atomic component (starting by zero) of the given term: "(a b c);1" ~> "b".
								# The 'n-' operator resolves to the first n+1 atomic components of the given term: "(a b c);1-" ~> "a b".

# An hyphen or nothing for the ',n[-]' operator.
M -> hyphen;
M -> ;

F -> openfun TPL arrow T closefun;		# A function term : "<parameter:type -> body>".
TPL -> ;
TPL -> TP;
TPL -> TPL comma TP;
TP -> P colon T;
TP -> T;
TP -> P assignment T; 

# The function parameter.
P -> I;											# An identifier.
P -> atparam;									# An 'at' parameter of the form "@n" where n is a natural number.

# An identifier is a non empty list of "id" words of the form "[a-zA-Z\_][a-zA-Z\_\0-\9]*" separated by dots. 
I -> I dot id;
I -> id;

# References.
R -> R_t S_ts;								# Without path.
R -> R_t openpar S_ps closepar;				# With path (must use parentheses to disambiguate): list of components separated by "/".
R_t -> ampersand;							# References the statement's type.
R_t -> ampersand caret;						# References the specializations' instance.
R_t -> ampersand bang;						# References the declarations' value.
S_ts -> uuid;								# Reference by UUID. If used in a path must be at the top: "&2c70597f-966a-4281-9ace-2e161544dbd1" or "&(2c70597f-966a-4281-9ace-2e161544dbd1/s002.sub_00/s003)".
S_ts -> S_t;
S_t -> S;
S_t -> turnstile;							# Refers to a context's consequence. If in a reference without path the active context, if with path the previously referenced one: "&|-" or "&(Set.Equal.th.symm/s003/|-)"
S_ps -> bar S_p;							# Absolute path: begins with "/".
S_ps -> uuid bar S_p;						# Path beginning with uuid.
S_ps -> S_p;
S_p -> S bar S_p;							# Path separator is "/".
S_p -> S_t;
S -> I;										# Path component might be an identifier.
S -> hexref;								# Path component might be an hexadecimal reference.

# Multiprojection.
MP -> ;
MP -> MP AN;
AN -> asterisk;
AN -> asterisk number;
