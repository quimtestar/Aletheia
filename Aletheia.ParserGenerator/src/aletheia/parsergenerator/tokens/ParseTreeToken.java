/*******************************************************************************
 * Copyright (c) 2014 Quim Testar.
 *
 * This file is part of the Aletheia Proof Assistant.
 *
 * The Aletheia Proof Assistant is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * The Aletheia Proof Assistant is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with the Aletheia Proof Assistant. If not, see
 * <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package aletheia.parsergenerator.tokens;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import aletheia.parsergenerator.parser.Production;
import aletheia.parsergenerator.symbols.Symbol;

/**
 * A token that corresponds to a non-terminal symbol. It will be generated by
 * the parser, and records the {@link Production} and the list of tokens
 * corresponding to the symbols on the right part of that production used to
 * create it.
 */
public class ParseTreeToken extends NonTerminalToken
{
	private final Production production;
	private final List<Token<? extends Symbol>> children;

	/**
	 * Creates a new non-terminal token.
	 *
	 * @param production
	 *            The production used to generate this non-terminal token.
	 * @param startLocation
	 *            The start location of this token.
	 * @param stopLocation
	 *            The stop location of this token.
	 * @param children
	 *            The list of tokens on which we are applying the production
	 *            rule.
	 */
	public ParseTreeToken(Production production, List<Token<? extends Symbol>> children)
	{
		super(production, children);
		this.production = production;
		this.children = new ArrayList<>(children);
	}

	public Production getProduction()
	{
		return production;
	}

	public List<Token<? extends Symbol>> getChildren()
	{
		return Collections.unmodifiableList(children);
	}

	@Override
	public String toString()
	{
		return "ParseTreeToken [production=" + production + ", children=" + children + "]";
	}

}
